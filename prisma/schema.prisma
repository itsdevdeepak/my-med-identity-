// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum Role {
  PATIENT
  MEDICAL_STAFF
  HEALTH_INSURANCE_COMPANY
  ADMIN
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum Gender {
  Male
  Female
  Other
}

model User {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  email           String           @unique
  name            String
  ssn             String           @unique
  password        String
  mobileNumber    Int?             @unique
  role            Role             @default(PATIENT)
  dateOfBirth     DateTime?
  gender          Gender?
  height          String?
  weight          String?
  bloodGroup      BloodGroup?
  allergies       String[]
  medicalHistorys MedicalHistory[]
  labResults      LabResult[]
  insurance       Insurance[]
  records         Record[]
}

model Record {
  id          String   @id @default(uuid())
  name        String
  date        DateTime @db.Date
  description String
  fileUrl     String
  allergies   String[]

  userID String
  user   User   @relation(fields: [userID], references: [id])
}

model MedicalStaff {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  email        String     @unique
  name         String
  mobileNumber Int?       @unique
  ssn          String     @unique
  role         Role       @default(MEDICAL_STAFF)
  dateOfBirth  DateTime?
  gender       Gender?
  bloodGroup   BloodGroup?
}

model HealthInsuranceCompany {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  email        String   @unique
  name         String
  mobileNumber Int      @unique
  role         Role     @default(HEALTH_INSURANCE_COMPANY)
}

model MedicalHistory {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  condition     String
  illness       String
  medication    String
  allergies     String
  Immunizations String

  userID String
  user   User   @relation(fields: [userID], references: [id])
}

model LabResult {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  testName   String
  testResult String
  testDate   DateTime

  userID String
  user   User   @relation(fields: [userID], references: [id])
}

model Insurance {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  insurance_provider String
  policy_number      Int
  policy_start_date  DateTime
  policy_end_date    DateTime

  userID String
  user   User   @relation(fields: [userID], references: [id])
}
